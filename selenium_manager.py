"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º Selenium –¥—Ä–∞–π–≤–µ—Ä–æ–º
"""
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time


class SeleniumManager:
    """Singleton –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º Selenium –¥—Ä–∞–π–≤–µ—Ä–æ–º"""
    
    _instance = None
    _driver = None
    _is_initialized = False
    _last_activity = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def get_driver(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if not self._is_initialized or not self._health_check():
            self._initialize_driver()
        
        self._last_activity = time.time()
        return self._driver
    
    def _initialize_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium –¥—Ä–∞–π–≤–µ—Ä–∞...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
            
            options = Options()
            
            # –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
            options.add_argument('--headless')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            
            # –í–ê–ñ–ù–û: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            options.add_experimental_option("detach", True)  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
            options.add_experimental_option("excludeSwitches", ["enable-logging"])
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument('--window-size=1920,1080')
            
            # User Agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
            
            self._driver = webdriver.Chrome(options=options)
            
            # –û–¢–ö–†–´–í–ê–ï–ú –ü–£–°–¢–£–Æ –°–¢–†–ê–ù–ò–¶–£ —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è
            self._driver.get("about:blank")
            
            self._is_initialized = True
            self._last_activity = time.time()
            logging.info("‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selenium –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise
    
    def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if not self._driver:
                return False
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥—Ä–∞–π–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
            return self._driver.current_url is not None
            
        except Exception:
            return False
    
    def _keep_alive(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            # –ï—Å–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (self._last_activity and 
                time.time() - self._last_activity > 30 and 
                self._driver):
                
                current_url = self._driver.current_url
                if current_url and current_url != "about:blank":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Å—Å–∏—é
                    self._driver.get(current_url)
                else:
                    # –ò–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º about:blank
                    self._driver.get("about:blank")
                
                self._last_activity = time.time()
                logging.debug("üîÅ Keep-alive: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Keep-alive –æ—à–∏–±–∫–∞: {e}")
    
    def parse_match_page(self, match_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            logging.info(f"üåê –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {match_url}")
            
            driver = self.get_driver()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
            original_window = driver.current_window_handle
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            driver.execute_script("window.open('');")
            driver.switch_to.window(driver.window_handles[-1])
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞
                driver.get(match_url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                wait = WebDriverWait(driver, 10)
                wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, '.scoreboard-timer__value--lpnFb')
                ))
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                time.sleep(1)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MatchPageParser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                from basketball_parser import MatchPageParser
                parser = MatchPageParser(driver)
                match_data = parser.parse_match_data()
                
                return match_data
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π
                driver.close()
                driver.switch_to.window(original_window)
                
                # –í—ã–∑—ã–≤–∞–µ–º keep-alive –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                self._keep_alive()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            if "invalid session id" in str(e).lower():
                logging.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä...")
                self._initialize_driver()
            
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
selenium_manager = SeleniumManager()
