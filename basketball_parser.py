# basketball_parser.py
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π
"""
import logging
import time

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from config import (BROWSER_CONFIG, MATCH_TIME_CONFIG, PARSER_CONFIG,
                    SITE_CONFIG, MATCH_FILTERS)


class BasketballParser:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.banned_tournaments = MATCH_FILTERS['BANNED_TOURNAMENTS']

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        options = webdriver.ChromeOptions()

        if BROWSER_CONFIG['HEADLESS']:
            options.add_argument('--headless')

        options.add_argument(f'--user-agent={BROWSER_CONFIG["USER_AGENT"]}')
        options.add_argument(f'--window-size={BROWSER_CONFIG["WINDOW_SIZE"]}')
        options.add_argument('--disable-blink-features=AutomationControlled')

        # –ú–∞—Å—à—Ç–∞–± 50%
        options.add_argument('--force-device-scale-factor=0.5')
        options.add_argument('--high-dpi-support=0.5')

        if BROWSER_CONFIG.get('DISABLE_LOGS', True):
            options.add_argument('--log-level=3')
            options.add_experimental_option(
                'excludeSwitches', ['enable-logging'])

        self.driver = webdriver.Chrome(options=options)
        self.wait = WebDriverWait(
            self.driver, PARSER_CONFIG['PAGE_LOAD_TIMEOUT'])

    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()

    def load_page(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            self.driver.get(SITE_CONFIG['URL'])
            self.wait.until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, SITE_CONFIG['MATCH_CONTAINER']))
            )
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False

    def parse_matches(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            matches = self.driver.find_elements(
                By.CSS_SELECTOR, SITE_CONFIG['MATCH_CONTAINER'])
            parsed_data = []

            for match in matches:
                match_data = self._parse_single_match(match)

                # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä
                if match_data and self._is_tournament_allowed(match_data):
                    parsed_data.append(match_data)
                elif match_data:
                    logging.debug(
                        f"–ü—Ä–æ–ø—É—â–µ–Ω –º–∞—Ç—á –∏–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: {match_data['teams']}")

            return parsed_data

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–µ–π: {e}")
            return []

    def _is_tournament_allowed(self, match_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        tournament = match_data['tournament']

        # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if tournament in self.banned_tournaments:
            return False

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        if MATCH_FILTERS['EXCLUDE_WOMEN'] and '(–∂)' in match_data['teams'].lower():
            return False

        return True

    def _parse_single_match(self, match_element):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            teams = match_element.find_element(
                By.CSS_SELECTOR, SITE_CONFIG['TEAMS_SELECTOR']).text
            match_time = match_element.find_element(
                By.CSS_SELECTOR, SITE_CONFIG['TIME_SELECTOR']).text

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ —Å —Å–∫–æ–±–∫–∞–º–∏ (–∫—Ä–æ–º–µ –∂–µ–Ω—Å–∫–∏—Ö)
            if '(' in teams and ')' in teams:
                if '(–∂)' not in teams.lower():
                    return None

            # –°—á–µ—Ç –∏ –≥–æ–ª—ã
            try:
                score = match_element.find_element(
                    By.CSS_SELECTOR, SITE_CONFIG['SCORE_SELECTOR']).text
                # –ü–†–ê–í–ò–õ–¨–ù–û –ü–ê–†–°–ò–ú total_points
                if ':' in score:
                    score_parts = score.split(':')
                    total_goals = int(score_parts[0]) + int(score_parts[1])
                else:
                    total_goals = 0
            except:
                score = '-'
                total_goals = 0

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if total_goals > 0:
                logging.info(
                    f"–ú–∞—Ç—á {teams}: —Å—á–µ—Ç {score}, total_points = {total_goals}")

            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            odds_elements = match_element.find_elements(
                By.CSS_SELECTOR, SITE_CONFIG['ODDS_SELECTOR'])
            p1 = odds_elements[0].text if len(odds_elements) > 0 else '-'
            p2 = odds_elements[2].text if len(odds_elements) > 2 else '-'

            # –¢–æ—Ç–∞–ª—ã
            try:
                total = match_element.find_element(
                    By.CSS_SELECTOR, SITE_CONFIG['TOTAL_SELECTOR']).text
                under_over = match_element.find_elements(
                    By.CSS_SELECTOR, SITE_CONFIG['UNDER_OVER_SELECTOR'])
                under = under_over[0].text.split(
                )[-1] if len(under_over) > 0 else '-'
                over = under_over[1].text.split(
                )[-1] if len(under_over) > 1 else '-'
            except:
                total = under = over = '-'

            # –¢—É—Ä–Ω–∏—Ä
            tournament = self._find_tournament(match_element)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
            total_match_time = self._get_total_match_time(tournament, match_element)

            # üÜï –í–´–ß–ò–°–õ–Ø–ï–ú –ü–ï–†–ò–û–î (—Ç–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã)
            period = self._calculate_period(match_time, total_match_time)
            
            logging.info(f"üéØ –ú–∞—Ç—á {teams}: –≤—Ä–µ–º—è {match_time}, –ø–µ—Ä–∏–æ–¥ {period}, —Ñ–æ—Ä–º–∞—Ç {total_match_time}–º–∏–Ω")

            return {
                'teams': teams,
                'tournament': tournament,
                'time': match_time,
                'total_match_time': total_match_time,
                'period': period,  # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ò–û–î
                'score': score,
                'total_points': total_goals,
                'p1': p1,
                'p2': p2,
                'total': total,
                'under': under,
                'over': over
            }

        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–∞: {e}")
            return None

    def _get_total_match_time(self, tournament, match_element):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞ –ø–æ —Ç—É—Ä–Ω–∏—Ä—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 2x10 –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            try:
                period_elements = match_element.find_elements(
                    By.CSS_SELECTOR, ".event-block-label--Ol68n")
                for elem in period_elements:
                    if '2x10' in elem.text:
                        return 20  # 2x10 —Ñ–æ—Ä–º–∞—Ç
            except:
                pass

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞
            tournament_upper = tournament.upper()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 4x12 (48 –º–∏–Ω—É—Ç)
            for key in MATCH_TIME_CONFIG:
                if key in ['NBA', 'CDBL', 'WCBA', 'PBA', 'Prime Division']:
                    if any(word in tournament_upper for word in [key.upper(), key]):
                        return 48

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç 4x10 (40 –º–∏–Ω—É—Ç)
            for key in MATCH_TIME_CONFIG:
                if key not in ['NBA', 'CDBL', 'WCBA', 'PBA', 'Prime Division', 'DEFAULT_TIME']:
                    if any(word in tournament_upper for word in [key.upper(), key]):
                        return 40

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return MATCH_TIME_CONFIG['DEFAULT_TIME']

        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞: {e}")
            return MATCH_TIME_CONFIG['DEFAULT_TIME']

    def _find_tournament(self, match_element):
        """–ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –º–∞—Ç—á–µ–π
            all_elements = self.driver.find_elements(
                By.CSS_SELECTOR,
                ".sport-competition--Xt2wb, .sport-base-event--W4qkO"
            )

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
            current_match_index = None
            for i, element in enumerate(all_elements):
                if element == match_element:
                    current_match_index = i
                    break

            if current_match_index is None:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—É—Ä–Ω–∏—Ä –≤—ã—à–µ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            current_tournament = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for i in range(current_match_index, -1, -1):
                element = all_elements[i]
                element_class = element.get_attribute("class")

                if "sport-competition--" in element_class:
                    # –ù–∞—à–ª–∏ —Ç—É—Ä–Ω–∏—Ä, –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    try:
                        tournament_name = element.find_element(
                            By.CSS_SELECTOR, ".table-component-text--Tjj3g"
                        ).text.strip()
                        current_tournament = tournament_name
                        break
                    except Exception as e:
                        logging.debug(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
                        continue

            return current_tournament

        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _calculate_period(self, match_time, total_match_time):
        try:
            if not match_time or match_time == '-' or ':' not in match_time:
                return None

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
            parts = match_time.split(':')
            minutes = int(parts[0]) if parts[0].isdigit() else 0
            seconds = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
            
            total_seconds = minutes * 60 + seconds
            
            # üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ì–†–ê–ù–ò–¶–´ –ü–ï–†–ò–û–î–û–í –î–õ–Ø –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–û–í
            if total_match_time == 40:  # 4x10 –º–∏–Ω—É—Ç
                period_ends = [10*60, 20*60, 30*60, 40*60]  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: 10:00, 20:00, 30:00, 40:00
            elif total_match_time == 48:  # 4x12 –º–∏–Ω—É—Ç
                period_ends = [12*60, 24*60, 36*60, 48*60]  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: 12:00, 24:00, 36:00, 48:00
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                period_ends = [10*60, 20*60, 30*60, 40*60]
            
            # üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–ï–†–ò–û–î
            if total_seconds <= period_ends[0]:          # 00:00 - 10:00 (40–º–∏–Ω) –∏–ª–∏ 00:00 - 12:00 (48–º–∏–Ω)
                period = 1
            elif total_seconds <= period_ends[1]:        # 10:01 - 20:00 –∏–ª–∏ 12:01 - 24:00
                period = 2
            elif total_seconds <= period_ends[2]:        # 20:01 - 30:00 –∏–ª–∏ 24:01 - 36:00
                period = 3
            elif total_seconds <= period_ends[3]:        # 30:01 - 40:00 –∏–ª–∏ 36:01 - 48:00
                period = 4
            else:                                        # –ø–æ—Å–ª–µ 40:00 –∏–ª–∏ 48:00
                period = 5  # –æ–≤–µ—Ä—Ç–∞–π–º
            
            logging.info(f"üéØ –ú–∞—Ç—á: –≤—Ä–µ–º—è {match_time} ({total_seconds}—Å–µ–∫), —Ñ–æ—Ä–º–∞—Ç {total_match_time}–º–∏–Ω, –ø–µ—Ä–∏–æ–¥ {period}")
            return period

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è '{match_time}': {e}")
            return None