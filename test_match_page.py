import logging
from basketball_parser import BasketballParser, MatchPageParser
import time
from selenium.webdriver.common.by import By
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def test_match_page_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞"""
    parser = BasketballParser()
    match_parser = None
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        parser.setup_driver()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å URL –º–∞—Ç—á–∞
        if not parser.load_page():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return
            
        # –ü–∞—Ä—Å–∏–º –º–∞—Ç—á–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å URL
        matches = parser.parse_matches()
        if not matches:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π")
            return
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∞
        test_match = matches[0]
        match_url = test_match['match_url']
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç—á: {test_match['teams']}")
        print(f"üìé URL: {match_url}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞
        match_parser = MatchPageParser(parser.driver)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞...")
        if not match_parser.load_match_page(match_url):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞")
            return
            
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        print("üìä –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞...")
        match_data = match_parser.parse_match_data()
        # –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥:

        print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –¢–û–¢–ê–õ–ê:")

        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            match_parser.driver.save_screenshot("match_page_debug.png")
            print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: match_page_debug.png")
            
            # 2. –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "—Ç–æ—Ç–∞–ª" –∏–ª–∏ "total"
            all_elements = match_parser.driver.find_elements(By.XPATH, "//*[contains(translate(text(), '–¢–û–¢–ê–õ', '—Ç–æ—Ç–∞–ª'), '—Ç–æ—Ç–∞–ª') or contains(translate(text(), 'TOTAL', 'total'), 'total')]")
            print(f"üî§ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å '—Ç–æ—Ç–∞–ª/total': {len(all_elements)}")
            
            for i, elem in enumerate(all_elements):
                print(f"  {i}: '{elem.text}' (–∫–ª–∞—Å—Å: {elem.get_attribute('class')})")
            
            # 3. –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–∏—Å–ª–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—Ç–∞–ª—ã)
            number_elements = match_parser.driver.find_elements(By.XPATH, "//*[contains(text(), '.')]")
            print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–∫–∞–º–∏: {len(number_elements)}")
            
            for i, elem in enumerate(number_elements[:10]):  # –ø–µ—Ä–≤—ã–µ 10
                text = elem.text.strip()
                if text and any(c.isdigit() for c in text):
                    print(f"  {i}: '{text}' (–∫–ª–∞—Å—Å: {elem.get_attribute('class')})")
            
            # 4. –ò—â–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
            blocks = [
                '.sport-base-event--W4qkO',
                '.table-component-factor-value_single--TOTnW', 
                '.table-component-factor-value_param--M33Ul',
                '.table-component-factor-value_complex--HFX8T'
            ]
            
            for block in blocks:
                elements = match_parser.driver.find_elements(By.CSS_SELECTOR, block)
                print(f"üì¶ –ë–ª–æ–∫ '{block}': {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                for i, elem in enumerate(elements):
                    if elem.text.strip():
                        print(f"  {i}: '{elem.text}'")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")        
        if match_data:
            print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –º–∞—Ç—á–∞: {match_data['current_time']}")
            print(f"üéØ –°—Ç–∞—Ç—É—Å: {match_data['match_status']}")
            print(f"üìä –°—á–µ—Ç: {match_data['score']}")
            print(f"üèÄ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {match_data['total_points']}")
            print(f"üìà –¢–æ—Ç–∞–ª: {match_data['total_value']}")
            print(f"üïí –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {match_data['timestamp']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if parser.driver:
            parser.close_driver()

if __name__ == "__main__":
    test_match_page_parsing()