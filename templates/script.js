// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentChart = null;
let wsConnected = false;
window.wsConnected = false;
let currentOpenMatchId = null;
let previousChartData = null;
let changeIndicatorTimeout = null;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modal = document.getElementById('chartModal');
const closeBtn = document.querySelector('.close');

closeBtn.onclick = function() {
    modal.style.display = 'none';
    if (currentChart) {
        currentChart.destroy();
        currentChart = null;
    }
    currentOpenMatchId = null;
}

window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = 'none';
        if (currentChart) {
            currentChart.destroy();
            currentChart = null;
        }
        currentOpenMatchId = null;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateMinutesElapsed(currentTime) {
    if (!currentTime || currentTime === '-') return 0;
    try {
        const parts = currentTime.split(':');
        if (parts.length < 2) return 0;
        const minutes = parseInt(parts[0]) || 0;
        const seconds = parseInt(parts[1]) || 0;
        return minutes + (seconds / 60);
    } catch (error) {
        return 0;
    }
}

function getDeviationClass(deviation) {
    if (!deviation) return 'neutral';
    if (deviation > 5) return 'positive';
    if (deviation < -5) return 'negative';
    return 'neutral';
}

function getTotalDiffClass(diff, percent) {
    if (!diff || diff === 0) return '';
    if (percent < -10) return 'row-negative';
    if (percent > 10) return 'row-positive';
    return '';
}

function getCellDiffClass(percent) {
    if (!percent) return 'neutral';
    if (percent < -10) return 'negative';
    if (percent > 10) return 'positive';
    return 'neutral';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ç—á–µ–π
function updateTable(matches) {
    console.log('üîÑ updateTable called with', matches?.length, 'matches');
    
    if (!matches || matches.length === 0) {
        document.getElementById('matches-table').innerHTML = 
            '<div class="loading">üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</div>';
        document.getElementById('stats').innerHTML = 
            '–ú–∞—Ç—á–µ–π: 0 | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ' + new Date().toLocaleTimeString();
        return;
    }

    document.getElementById('stats').innerHTML = 
        `üìä –ú–∞—Ç—á–µ–π: ${matches.length} | üîÑ ${new Date().toLocaleTimeString()}`;
    
    const sortedMatches = [...matches].sort((a, b) => {
        return (a.tournament || '–ë–µ–∑ —Ç—É—Ä–Ω–∏—Ä–∞').localeCompare(b.tournament || '–ë–µ–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
    });
    
    let html = `
        <table>
            <thead>
                <tr>
                    <th>–ö–æ–º–∞–Ω–¥—ã / –¢—É—Ä–Ω–∏—Ä</th>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–°—á–µ—Ç</th>
                    <th>–û—á–∫–∏</th>
                    <th>–ù–∞—á. —Ç–æ—Ç–∞–ª</th>
                    <th>–¢–µ–∫. —Ç–æ—Ç–∞–ª</th>
                    <th>Œî –¢–æ—Ç–∞–ª–∞</th>
                    <th>–¢–µ–º–ø</th>
                    <th>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</th>
                </tr>
            </thead>
            <tbody>
    `;

    sortedMatches.forEach(match => {
        if (!match.minutes_elapsed && match.current_time && match.current_time !== '-') {
            match.minutes_elapsed = calculateMinutesElapsed(match.current_time);
        }
        
        const deviationClass = getDeviationClass(match.total_deviation);
        
        html += `
            <tr class="${match.initial_total && match.total_value ? getTotalDiffClass(match.total_value - match.initial_total, ((match.total_value - match.initial_total) / match.initial_total * 100)) : ''}" onclick="showMatchChart(${match.id}, '${escapeHtml(match.teams)}')">
                <td>
                    <div class="match-teams">${match.teams}</div>
                    <div class="tournament">${match.tournament}</div>
                </td>
                <td><strong>${match.current_time}</strong></td>
                <td><strong>${match.score}</strong></td>
                <td>${match.total_points}</td>
                <td>${match.initial_total || '-'}</td>
                <td>${match.total_value || '-'}</td>
                <td>
                    ${match.initial_total && match.total_value ? 
                        `<span class="${getCellDiffClass((match.total_value - match.initial_total) / match.initial_total * 100)}">
                            ${(match.total_value - match.initial_total).toFixed(1)} 
                            (${((match.total_value - match.initial_total) / match.initial_total * 100).toFixed(1)}%)
                        </span>` 
                        : '-'
                    }
                </td>                      
                <td>${match.current_pace || '-'}</td>
                <td>
                    <span class="${deviationClass}">
                        ${match.total_deviation ? `${match.total_deviation > 0 ? '+' : ''}${match.total_deviation}%` : '-'}
                    </span>
                </td>
            </tr>
        `;
    });

    html += '</tbody></table>';
    document.getElementById('matches-table').innerHTML = html;
}

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws`;
    
    const socket = new WebSocket(wsUrl);
    
    socket.onopen = function() {
        console.log('‚úÖ WebSocket connected');
        wsConnected = true;
        window.wsConnected = true;
        document.getElementById('stats').innerHTML = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ | –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...';
    };
    
    socket.onmessage = function(event) {
        try {
            const data = JSON.parse(event.data);
            if (data.type === "table_update") {
                updateTable(data.data.matches);
                updateOpenChart(data.data.matches);
            }
        } catch (error) {
            console.error('‚ùå Error parsing WebSocket message:', error);
        }
    };

    socket.onclose = function() {
        console.log('‚ùå WebSocket disconnected');
        wsConnected = false;
        window.wsConnected = false;
        document.getElementById('stats').innerHTML = 'üü° –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        setTimeout(connectWebSocket, 5000);
    };

    socket.onerror = function(error) {
        console.error('‚ùå WebSocket error:', error);
    };
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)...
// [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤]

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    fetch('/api/matches')
        .then(response => response.json())
        .then(data => updateTable(data.matches))
        .catch(error => {
            console.error('‚ùå Initial load error:', error);
            document.getElementById('matches-table').innerHTML = 
                '<div class="loading">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
        });

    connectWebSocket();
});