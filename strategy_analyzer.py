# strategy_analyzer.py
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
"""
import logging
from datetime import datetime
from config import STRATEGY_CONFIG

class StrategyAnalyzer:
    def __init__(self, db):
        self.db = db
        self.match_signals = {}  # –•—Ä–∞–Ω–∏–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –º–∞—Ç—á–∞–º
    
    def analyze_match_strategy(self, match_data):
        """–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞"""
        try:
            match_id = match_data['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
            if not self._check_basic_conditions(match_data):
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Ç—á–∞
            if match_id not in self.match_signals:
                self.match_signals[match_id] = {
                    'deviation_signals': [],
                    'reversal_signals': [],
                    'last_analysis': None
                }
            
            signal_data = self.match_signals[match_id]
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—Ç–∞–ª–∞
            deviation_signal = self._check_deviation_signal(match_data, signal_data)
            if deviation_signal:
                return deviation_signal
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç–µ–º–ø–∞
            reversal_signal = self._check_pace_reversal(match_data, signal_data)
            if reversal_signal:
                return reversal_signal
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å—Ç–∞–≤–∫—É
            bet_signal = self._check_bet_signal(match_data, signal_data)
            if bet_signal:
                return bet_signal
            
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None
    
    def _check_basic_conditions(self, match_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if (not match_data.get('total_value') or 
            not match_data.get('current_pace') or
            match_data['score'] == '-'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Ç—á–∞
        progress = match_data.get('match_progress', 0)
        if (progress < STRATEGY_CONFIG['MIN_MATCH_PROGRESS'] or 
            progress > STRATEGY_CONFIG['MAX_MATCH_PROGRESS']):
            return False
        
        return True
    
    def _check_deviation_signal(self, match_data, signal_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–æ—Ç–∞–ª–∞"""
        deviation = match_data.get('total_deviation', 0)
        
        if abs(deviation) >= STRATEGY_CONFIG['DEVIATION_THRESHOLD']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            recent_signals = [s for s in signal_data['deviation_signals'] 
                            if s['timestamp'] > datetime.now().timestamp() - 300]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            
            if not recent_signals:
                signal_type = 'high' if deviation > 0 else 'low'
                signal = {
                    'type': 'deviation',
                    'signal_type': signal_type,
                    'deviation': deviation,
                    'message': f"üìä –¢–æ—Ç–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {abs(deviation):.1f}%",
                    'timestamp': datetime.now().timestamp()
                }
                
                signal_data['deviation_signals'].append(signal)
                return signal
        
        return None
    
    def _check_pace_reversal(self, match_data, signal_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç–µ–º–ø–∞"""
        if not signal_data['deviation_signals']:
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        last_deviation = signal_data['deviation_signals'][-1]
        current_deviation = match_data.get('total_deviation', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è)
        if (last_deviation['signal_type'] == 'high' and current_deviation < last_deviation['deviation'] * 0.7 or
            last_deviation['signal_type'] == 'low' and current_deviation > last_deviation['deviation'] * 0.7):
            
            reversal_signal = {
                'type': 'reversal',
                'direction': 'down' if last_deviation['signal_type'] == 'high' else 'up',
                'message': f"üîÑ –†–∞–∑–≤–æ—Ä–æ—Ç —Ç–µ–º–ø–∞! –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è",
                'timestamp': datetime.now().timestamp()
            }
            
            signal_data['reversal_signals'].append(reversal_signal)
            return reversal_signal
        
        return None
    
    def _check_bet_signal(self, match_data, signal_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å—Ç–∞–≤–∫—É"""
        if (len(signal_data['deviation_signals']) >= 1 and 
            len(signal_data['reversal_signals']) >= STRATEGY_CONFIG['PACE_REVERSAL_CONFIRMATIONS']):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—Ç–∞–ª –ø–æ—à–µ–ª –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É —á—Ç–æ –∏ —Ç–µ–º–ø
            last_deviation = signal_data['deviation_signals'][-1]
            last_reversal = signal_data['reversal_signals'][-1]
            current_deviation = match_data.get('total_deviation', 0)
            
            # –ï—Å–ª–∏ —Ç–æ—Ç–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
            if (last_reversal['direction'] == 'down' and current_deviation < 0 or
                last_reversal['direction'] == 'up' and current_deviation > 0):
                
                bet_type = '–¢–ú' if last_reversal['direction'] == 'down' else '–¢–ë'
                bet_signal = {
                    'type': 'bet',
                    'bet_type': bet_type,
                    'total_value': match_data['total_value'],
                    'message': f"üéØ –°–¢–ê–í–ö–ê: {bet_type}({match_data['total_value']})",
                    'timestamp': datetime.now().timestamp()
                }
                
                # –û—á–∏—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
                signal_data['deviation_signals'].clear()
                signal_data['reversal_signals'].clear()
                
                return bet_signal
        
        return None